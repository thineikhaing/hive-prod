.top_bar
  .logo_header
    %span{style:'font-size: 4em !important;color: rgb(7,165,179)'}carmic
    %br
    %span{style:"font-size: 18px"}at the apiary
  .redCar
    = image_tag("RedH.png",alt: "CarMask" )

  .green_cicle
  .active_car
    =@users.count
    active vehicles

  .pink_cicle
  .incident_car
    0 incidents


%br
%br
%br
%br
%div.carmic_map
  #map
#cd-zoom-out
  ='--'
#cd-zoom-in
  ='+'

:javascript
   Carmic.init();

   SlidingMarker.initializeGlobally();

   var __markers;

   var old_markers;

   var handler = Gmaps.build('Google', { builders: { Marker: InfoBoxBuilder} });

     handler.buildMap({
        provider: {
          disableDefaultUI:true,
          zoom: 16,
          streetViewControl: false,
          panControl: false,
          mapTypeControl: true,
          mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DEFAULT,
            mapTypeIds: [
              google.maps.MapTypeId.ROADMAP,
              google.maps.MapTypeId.TERRAIN
            ]
          },
          zoomControl: false,
        },
        internal: {id: 'map'}
        }, function(){

       var markers = handler.addMarkers(#{raw @hash.to_json});


       __markers = markers
       old_markers = #{raw @hash.to_json}

       var style = document.createElement('style');
       style.markers = [];
       document.getElementsByTagName('head')[0].appendChild(style);

       _.each(markers, function(marker){
          google.maps.event.trigger(marker.getServiceObject(), 'click');
       });

       handler.bounds.extendWith(markers);

       handler.fitMapToBounds();

     });

     var zoomControlDiv = document.createElement('div');
     zoomControlDiv.id = 'custom_zoomcontrol';
     var zoomControl = new CustomZoomControl(zoomControlDiv, map);

     handler.getMap().controls[google.maps.ControlPosition.RIGHT_CENTER].push(zoomControlDiv);
     /*
     function updateMarkers(map, markersData, old_marker)
     {
         // Remove current markers
         console.log("replace")
         map.removeMarkers(old_marker);

         // Add each marker to the map according to received data

         __markers = _.map(markersData, function(markerJSON) {
             marker = map.addMarker(markerJSON);

             _.extend(marker, markerJSON);

             marker.infowindow = new google.maps.InfoWindow({
                 content: marker.infowindow
             });

             console.log("Replace Marker :::::");
             //console.log(marker);
             console.log(marker["lat"]);
             console.log(marker["lng"]);
             console.log(marker["marker_id"])

             return marker;

         });
         map.bounds.extendWith(__markers);
     };*/

      function updateMarkers(map, markersData, rm_marker,old_markers)
      {
          // Remove current markers
          console.log("replace")  ;
          console.log(old_markers);
          console.log(markersData);

          // Add each marker to the map according to received data


          __markers = _.map(old_markers, function(markerJSON) {
                       marker = markerJSON;

                       _.extend(marker, markerJSON);

                       marker.infowindow = new google.maps.InfoWindow({
                           content: marker.infowindow
                       });

                       console.log("Replace Marker :::::");
                       //console.log(marker);
                       console.log(marker["lat"]);
                       console.log(marker["lng"]);
                       console.log(marker["marker_id"])

                       var lat = marker["lat"];
                       var lng = marker["lng"];

                       return marker;

                       var newLatLng = new google.maps.LatLng(lat, lng);
                       marker.setPosition(newLatLng);

                   });

      };

     function getCoords(){
         $.ajax({
             type: 'GET',
             url: "#{@url}",
             success: function(data){

                 updateMarkers(handler,data.marker,__markers,old_markers);

                 $(data.marker).each(function(i,e){
                     var marker = e;
                     var lat = e["lat"];
                     var lng = e["lng"];
                 })

             }
         });
     }


  //var lineCoordinates = [
  //      new google.maps.LatLng(1.3200528, 103.8438445),
  //      new google.maps.LatLng(1.3042924, 103.8324935)
  //    ];
  //    // Define the symbol, using one of the predefined paths ('CIRCLE')
  //    // supplied by the Google Maps JavaScript API.
  //    var lineSymbol = {
  //      path: google.maps.SymbolPath.CIRCLE,
  //      scale: 8,
  //    };
  //
  //    // Create the polyline and add the symbol to it via the 'icons' property.
  //    line = new google.maps.Polyline({
  //      path: lineCoordinates,
  //      icons: [{
  //        icon: lineSymbol,
  //        offset: '100%'
  //      }],
  //      map: handler.getMap()
  //    });
  //
  //    animateCircle();
  //
  //// Use the DOM setInterval() function to change the offset of the symbol
  //  // at fixed intervals.
  //  function animateCircle() {
  //      var count = 0;
  //      window.setInterval(function() {
  //        count = (count + 1) % 200;
  //
  //        var icons = line.get('icons');
  //        icons[0].offset = (count / 2) + '%';
  //        line.set('icons', icons);
  //    }, 20);
  //  }


  window.setInterval(getCoords, 5000);
