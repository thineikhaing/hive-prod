.row
  .columns.large-2#dashbeta
    carmic
    %sub{style:'font-size:15px;line-height:0px;'}
      DASH beta
  .columns.large-1
    &nbsp;
  .columns.large-9#lefttopbar

    .columns.large-4
      %input#autocomplete{:onkeypress => "geolocate(event)", :placeholder => "Seach By address", :type => "text"}

    .columns.large-2
      %span#country

    .columns.large-1#remove_country
      %span
        >
      =image_tag("cancel.png", id: 'rm_country', style: 'display:none')

    .columns.large-2
      %span#state
      %input{type:'text', id:'edit_city', style: 'display:none'}
    .columns.large-1#remove_state
      %span
        >
      =image_tag("cancel.png", id: 'rm_state', style: 'display:none')

    .columns.large-2
      %span#address
      %input{type:'text', id:'edit_street', style: 'display:none'}
    .columns.large-1#remove_street
      =image_tag("cancel.png", id: 'rm_street')

    =image_tag("TickOK.png", :alt => "Myanmar", id: 'ok_find')

    .columns.large-2#select_country
      =select_tag("country_list", options_from_collection_for_select(Country.all, "name", "name", params[:country]), {:prompt => 'Select Country'})

.row
  .columns.large-6
    .circle
      #map
    #btn_zoom_out
      ='-'
    #btn_zoom_in
      ='+'
  .columns.large-6#display_topic
    %ul.tabs{"data-tab" => ""}
      %li.tab-title
        %a{href: "#panel2", id: "car_tab"}
          %span=@users.count

      %li.tab-title.active
        %a{href: "#panel1", id: "message_tab"}
          %span
            =@topics_list.count rescue '0'

      %li.tab-title
        %a{href: "#panel3", id: "incident_tab"}
          %span=0
    .tabs-content
      #panel1.content.active
        %ul{:id => "nav"}
          - if @topics_list.present?
            - @topics_list.each do |sTopic|
              -string =   @topic_avatar_url[sTopic.id].to_s
              -substring = "carmic"
              -string.slice! substring

              -title = sTopic.title.split(':')

              -if (sTopic.offensive < 3)
                %li
                  %a{href:"#", id:"topicid", topicID: "#{sTopic.id}" , name:"topic_lists"  }
                    %table.topic_tbl{:width => "100%"}
                      %tr
                        %td
                          %span
                            >
                            -car_no = title.first.split("to ")
                            .car_no=car_no.last
                        %td{:colspan => "2"}
                          %span.title
                            = title.last
                        %td
                          %span.created_at
                            -if (sTopic.special_type == 3)
                              .stickytag
                                = "Sticky"
                            -else
                              .normaltag
                                #{time_ago_in_words(sTopic.created_at)} ago
                        %td
                          %span.distance
                            = @distance[sTopic.id] if @distance.present?

      #panel2.content
        %p This is the total user list.
      #panel3.content
        %p This is the total incidents list.

:javascript
   Carmic.init();

   var __markers,marker;

   var old_markers;

   var handler = Gmaps.build('Google', { builders: { Marker: InfoBoxBuilder} });

     handler.buildMap({
        provider: {
          disableDefaultUI:true,
          zoom: 18,
          streetViewControl: false,
          panControl: false,
          mapTypeControl: true,
          mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DEFAULT,
            mapTypeIds: [
              google.maps.MapTypeId.ROADMAP,
              google.maps.MapTypeId.TERRAIN
            ]
          },
          zoomControl: false,
        },
        internal: {id: 'map'}
        }, function(){


       var markers = handler.addMarkers(#{raw @hash.to_json});


       __markers = markers
       old_markers = #{raw @hash.to_json}



       _.each(markers, function(marker){
          google.maps.event.trigger(marker.getServiceObject(), 'click');
       });

       handler.bounds.extendWith(markers);

       handler.fitMapToBounds();

     });

     var zoomControlDiv = document.createElement('div');
     zoomControlDiv.id = 'custom_zoomcontrol';
     var zoomControl = new CustomZoomControl(zoomControlDiv, map);

     handler.getMap().controls[google.maps.ControlPosition.RIGHT_CENTER].push(zoomControlDiv);

     function updateMarkers(map, new_markers, rm_marker,old_markers)
     {
         // Remove current markers
         console.log("REMOVE MARKERS :::::")
        console.log(rm_marker)
        map.removeMarkers(rm_marker);

         var newMarkers= new_markers;
         var oldMarkers= old_markers;
         // Add each marker to the map according to received data


       map.removeMarkers(rm_marker);
       // Remove current markers
       // Add each marker to the map according to received data

       __markers = _.map(newMarkers, function(markerJSON) {

           marker = map.addMarker(markerJSON);
           //map.getMap().setZoom(16); // Not sure this should be in this iterator!
           console.log('markerJSON')
           console.log(markerJSON["lat"])
           console.log(markerJSON["marker_id"])
           for (var i = 0; i < oldMarkers.length; i++) {
           if (oldMarkers[i]["marker_id"] == markerJSON["marker_id"]) {
               var oldLat = oldMarkers[i]["lat"];
               var oldLng = oldMarkers[i]["lng"];

              var oldPosition = new google.maps.LatLng(oldLat,oldLng);

              marker.animation = new MarkerMoveAnimation(marker,
                 {
                     name: name
                     ,from: oldPosition
                     ,to: marker.getServiceObject().getPosition()
                     ,duration: 1000
                     ,effect: 'linear'
                     ,onStep: function(e)
                     {
                         //e.marker.getServiceObject().leash.setPath([start, e.marker.getServiceObject().getPosition()]);
                     }
                     ,onComplete: function(e)
                     {
                         animating = false;
                     }
                 })
              }

           }
           //google.maps.event.trigger(marker.getServiceObject(), 'click');

           _.extend(marker, markerJSON);


           marker.infowindow = new google.maps.InfoWindow({
               content: marker.infowindow
           });


           return marker;
       });

       //map.bounds.extendWith(__markers);


     };

     function getCoords(){
         $.ajax({
             type: 'GET',
             url: "#{@url}",
             success: function(data){

                 updateMarkers(handler,data.marker,__markers,old_markers);

                 old_markers = data.marker

                 $(data.marker).each(function(i,e){
                     var marker = e;
                     var lat = e["lat"];
                     var lng = e["lng"];
                 })

             }
         });
     }

     //google.maps.event.addListener(handler.getMap(), 'click', function( event ){
     //  var lat = event.latLng.lat();
     //  var long = event.latLng.lng();
     //  var latlng   = new google.maps.LatLng(lat, long);
     //  getLatLongDetail(latlng);
     //
     //   console.log("click event")
     //   console.log(lat,long)
     //   $.ajax({
     //
     //     data: {
     //       cur_lat: lat,
     //       cur_long: long
     //     },
     //     success: function(html) {
     //       var htmlobject = $(html);
     //
     //       var output = htmlobject.find("#display_topic")[0];
     //       var testing = new XMLSerializer().serializeToString(output);
     //       $("#display_topic").replaceWith(testing);
     //
     //     }
     //   });
     //});

   google.maps.event.addListener(handler.getMap(), 'zoom_changed', function( event ){
     //var lat = event.latLng.lat();
     //var long = event.latLng.lng();

     var lat = handler.getMap().getCenter().lat();
     var long = handler.getMap().getCenter().lng();

     //var latlng   = new google.maps.LatLng(lat, long);
     //getLatLongDetail(latlng);

      console.log("zoom event")
      //console.log(lat,long)
      $.ajax({

        data: {
          cur_lat: lat,
          cur_long: long
        },
        success: function(html) {
          var htmlobject = $(html);

          var output = htmlobject.find("#display_topic")[0];
          var testing = new XMLSerializer().serializeToString(output);
          $("#display_topic").replaceWith(testing);

        }
      });
   });


  $('#country_list').live('change', function() {
    var map = handler.getMap();
      var country = $('#country_list').val();
      var geocoder = new google.maps.Geocoder();

      geocoder.geocode( { 'address': country }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
              map.setCenter(results[0].geometry.location);
              re_lat =results[0].geometry.location.lat();
               re_lng =results[0].geometry.location.lng();

               var latlng   = new google.maps.LatLng(re_lat, re_lng);
               getLatLongDetail(latlng);

              map.setZoom(15);
          } else {
              alert("Could not find location: " + location);
          }
      });
  } );

  //$('#country_list').attr('size', 5);

   // This example displays an address form, using the autocomplete feature
               // of the Google Places API to help users fill in the information.

   var placeSearch, autocomplete;
   var componentForm = {
     street_number: 'short_name',
     route: 'long_name',
     locality: 'long_name',
     administrative_area_level_1: 'short_name',
     country: 'long_name',
     postal_code: 'short_name'
   };


     autocomplete = new google.maps.places.Autocomplete(
         /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),
         { types: ['geocode'] });
     // When the user selects an address from the dropdown,
     // populate the address fields in the form.
     google.maps.event.addListener(autocomplete, 'place_changed', function() {
       fillInAddress();
     });


   // [START region_fillform]
   function fillInAddress() {
     // Get the place details from the autocomplete object.
     var place = autocomplete.getPlace();

   }
   // [END region_fillform]

   // [START region_geolocation]
   // Bias the autocomplete object to the user's geographical location,
   // as supplied by the browser's 'navigator.geolocation' object.
   function geolocate(e) {
   var code = e.keyCode || e.which;
   console.log("code")
   console.log(code)
   if (code ==13){
      var map = handler.getMap();
            var country = $('#autocomplete').val();
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode( { 'address': country }, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);

                    re_lat =results[0].geometry.location.lat();
                     re_lng =results[0].geometry.location.lng();

                     var latlng   = new google.maps.LatLng(re_lat, re_lng);
                     getLatLongDetail(latlng);

                    map.setZoom(16);
                } else {
                    alert("Could not find location: " + location);
                }
            });
   }

   }

  var map = handler.getMap();

  $("#ok_find").on("click",function(){
    var street = $("#edit_street").val();
    var city = $("#edit_city").val();
    var country = $('#country').text();
    var format_address;
    var auto_address = $('#autocomplete').val();


    var geocoder = new google.maps.Geocoder();
    var re_lat, re_lng;

    if (auto_address == ''){

       if(street == ''){
         format_address = city + ', ' + country;

         geocoder.geocode( { 'address': format_address }, function(results, status) {
             if (status == google.maps.GeocoderStatus.OK) {
                 map.setCenter(results[0].geometry.location);

                 re_lat =results[0].geometry.location.lat();
                 re_lng =results[0].geometry.location.lng();

                 var latlng   = new google.maps.LatLng(re_lat, re_lng);
                 getLatLongDetail(latlng);

                 map.setZoom(10);
             } else {
                 alert("Could not find location: " + location);
             }
         });

       }
       if(country != '' && city != "" && street != "")
       {
         var city_country = city + ', ' + country;
         format_address = street + ', ' + city_country;

         geocoder.geocode( { 'address': format_address }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);

                re_lat =results[0].geometry.location.lat();
                re_lng =results[0].geometry.location.lng();

                var latlng   = new google.maps.LatLng(re_lat, re_lng);
                getLatLongDetail(latlng);

                map.setZoom(16);
            } else {
                alert("Could not find location: " + location);
            }
          });

       }
    }else{
       geocoder.geocode( { 'address': auto_address }, function(results, status) {
           if (status == google.maps.GeocoderStatus.OK) {
               map.setCenter(results[0].geometry.location);

               re_lat =results[0].geometry.location.lat();
               re_lng =results[0].geometry.location.lng();

               var latlng   = new google.maps.LatLng(re_lat, re_lng);
               getLatLongDetail(latlng);

               map.setZoom(16);
           } else {
               alert("Could not find location: " + location);
           }
       });
    }

     //alert(re_lat)
     //alert(re_lng)
    //alert(format_address)




    $('#autocomplete').hide();
    $('#country').show();
    $('#state').show();
    $('#address').show();
    $("#edit_street").hide();
    $("#edit_city").hide();

    $("#rm_state").hide();

    $('#state').text(city);
    $('#address').text(street);
    $("#remove_state  > span").text(">");
    $("#remove_country  > span").text(">");
    $("#remove_country  > span").text(">");
    $("#remove_street").show();
  })
   // [END region_geolocation]


   $("#remove_street").click(function(){
       $("#remove_state  > span").text(" ");
       $('#address').hide();
       $("#edit_street").hide();
       $("#rm_state").show();
       $("#remove_street").hide();

   })

   $("#rm_state").click(function(){
       $("#remove_country  > span").text(" ");
       $('#state').hide();
       $('#address').hide();
       $("#edit_street").hide();
       $("#edit_city").hide();
       $("#rm_state").hide();
       $("#rm_country").show();
   })

   $("#rm_country").click(function(){
       $("#remove_country  > span").text(" ");
       $("#country").hide();
       $("#rm_country").hide();
       $("#autocomplete").val("");
       $("#autocomplete").show();
   })

  window.setInterval(getCoords, 4000);
