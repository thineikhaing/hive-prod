.row
  .columns.large-2#dashbeta
    carmic
    %sub{style:'font-size:15px;line-height:0px;'}
      DASH beta

  .columns.large-9.right#lefttopbar
    %span#country
    >
    %span#state
    >
    %span#address
.row
  .columns.medium-5.right
    %label Country
    =select_tag("country_list", options_from_collection_for_select(Country.all, "name", "name", params[:country]), {:prompt => '---  Select Country ---'})

.row
  .columns.large-6
    .circle
      #map
    #btn_zoom_out
      ='-'
    #btn_zoom_in
      ='+'
  .columns.large-6
    %ul.tabs{"data-tab" => ""}
      %li.tab-title.active
        %a{href: "#panel1", id: "car_tab"}
          =@topics.count
          Topic
      %li.tab-title
        %a{href: "#panel2", id: "user_tab"}
          =@users.count
          User
      %li.tab-title
        %a{href: "#panel3", id: "incident_tab"}
          =0
          Incident
    .tabs-content
      #panel1.content.active
        #display_topic
          %ul{:id => "nav"}
            - if @topics_list.present?
              - @topics_list.each do |sTopic|
                -string =   @topic_avatar_url[sTopic.id].to_s
                -substring = "carmic"
                -string.slice! substring

                -title = sTopic.title.split(':')

                -if (sTopic.offensive < 3)
                  %li
                    %a{href:"#", id:"topicid", topicID: "#{sTopic.id}" , name:"topic_lists"  }
                      %table.topic_tbl{:width => "100%"}
                        %tr
                          %td
                            %span
                              >
                              -car_no = title.first.split("to ")
                              .car_no=car_no.last
                          %td{:colspan => "2"}
                            %span.title
                              = title.last
                          %td
                            %span.created_at
                              -if (sTopic.special_type == 3)
                                .stickytag
                                  = "Sticky"
                              -else
                                .normaltag
                                  #{time_ago_in_words(sTopic.created_at)} ago
                          %td
                            %span.distance
                              = @distance[sTopic.id] if @distance.present?
            %li
              %a{href:"#" , id:"topicid"}
                %table.topic_tbl{:width => "100%"}
                  %tr
                    %td
                      %span 123
                    %td{:colspan => "2"}
                      %span.title
                        test
                    %td
                      %span.created_at
                        fsfs
                    %td
                      %span.distance
                        fsdf
      #panel2.content
        %p This is the total user list.
      #panel3.content
        %p This is the total incidents list.
%br
.row
  .columns.large-6.right
    =paginate @topics_list
:javascript
   Carmic.init();

   var __markers,marker;

   var old_markers;

   var handler = Gmaps.build('Google', { builders: { Marker: InfoBoxBuilder} });

     handler.buildMap({
        provider: {
          disableDefaultUI:true,
          zoom: 16,
          streetViewControl: false,
          panControl: false,
          mapTypeControl: true,
          mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DEFAULT,
            mapTypeIds: [
              google.maps.MapTypeId.ROADMAP,
              google.maps.MapTypeId.TERRAIN
            ]
          },
          zoomControl: false,
        },
        internal: {id: 'map'}
        }, function(){


       var markers = handler.addMarkers(#{raw @hash.to_json});


       __markers = markers
       old_markers = #{raw @hash.to_json}



       _.each(markers, function(marker){
          google.maps.event.trigger(marker.getServiceObject(), 'click');
       });

       handler.bounds.extendWith(markers);

       handler.fitMapToBounds();

     });

     var zoomControlDiv = document.createElement('div');
     zoomControlDiv.id = 'custom_zoomcontrol';
     var zoomControl = new CustomZoomControl(zoomControlDiv, map);

     handler.getMap().controls[google.maps.ControlPosition.RIGHT_CENTER].push(zoomControlDiv);

     function updateMarkers(map, new_markers, rm_marker,old_markers)
     {
         // Remove current markers
         console.log("REMOVE MARKERS :::::")
        console.log(rm_marker)
        map.removeMarkers(rm_marker);

         var newMarkers= new_markers;
         var oldMarkers= old_markers;
         // Add each marker to the map according to received data


       map.removeMarkers(rm_marker);
       // Remove current markers
       // Add each marker to the map according to received data

       __markers = _.map(newMarkers, function(markerJSON) {

           marker = map.addMarker(markerJSON);
           //map.getMap().setZoom(16); // Not sure this should be in this iterator!
           console.log('markerJSON')
           console.log(markerJSON["lat"])
           console.log(markerJSON["marker_id"])
           for (var i = 0; i < oldMarkers.length; i++) {
           if (oldMarkers[i]["marker_id"] == markerJSON["marker_id"]) {
               var oldLat = oldMarkers[i]["lat"];
               var oldLng = oldMarkers[i]["lng"];

              var oldPosition = new google.maps.LatLng(oldLat,oldLng);

              marker.animation = new MarkerMoveAnimation(marker,
                 {
                     name: name
                     ,from: oldPosition
                     ,to: marker.getServiceObject().getPosition()
                     ,duration: 1000
                     ,effect: 'linear'
                     ,onStep: function(e)
                     {
                         //e.marker.getServiceObject().leash.setPath([start, e.marker.getServiceObject().getPosition()]);
                     }
                     ,onComplete: function(e)
                     {
                         animating = false;
                     }
                 })
              }

           }
           //google.maps.event.trigger(marker.getServiceObject(), 'click');

           _.extend(marker, markerJSON);


           marker.infowindow = new google.maps.InfoWindow({
               content: marker.infowindow
           });


           return marker;
       });

       //map.bounds.extendWith(__markers);


     };

     function getCoords(){
         $.ajax({
             type: 'GET',
             url: "#{@url}",
             success: function(data){

                 updateMarkers(handler,data.marker,__markers,old_markers);

                 old_markers = data.marker

                 $(data.marker).each(function(i,e){
                     var marker = e;
                     var lat = e["lat"];
                     var lng = e["lng"];
                 })

             }
         });
     }

     google.maps.event.addListener(handler.getMap(), 'click', function( event ){
       var lat = event.latLng.lat();
       var long = event.latLng.lng();
       var latlng   = new google.maps.LatLng(lat, long);
       getLatLongDetail(latlng);

        console.log("click event")
        console.log(lat,long)
        $.ajax({

          data: {
            cur_lat: lat,
            cur_long: long
          },
          success: function(html) {
            var htmlobject = $(html);

            var output = htmlobject.find("#display_topic")[0];
            var testing = new XMLSerializer().serializeToString(output);
            $("#display_topic").replaceWith(testing);

          }
        });
     });

   google.maps.event.addListener(handler.getMap(), 'zoom_changed', function( event ){
     //var lat = event.latLng.lat();
     //var long = event.latLng.lng();
      var lat = handler.getMap().getCenter().lat();
      var long = handler.getMap().getCenter().lng();

      var latlng   = new google.maps.LatLng(lat, long);
      getLatLongDetail(latlng);

      console.log("zoom event")
      console.log(lat,long)
      $.ajax({

        data: {
          cur_lat: lat,
          cur_long: long
        },
        success: function(html) {
          var htmlobject = $(html);

          var output = htmlobject.find("#display_topic")[0];
          var testing = new XMLSerializer().serializeToString(output);
          $("#display_topic").replaceWith(testing);

        }
      });
   });


  $('#country_list').live('change', function() {
    var map = handler.getMap();
      var country = $('#country_list').val();
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode( { 'address': country }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
              map.setCenter(results[0].geometry.location);
              map.setZoom(8);
          } else {
              alert("Could not find location: " + location);
          }
      });
  } );







  window.setInterval(getCoords, 4000);
