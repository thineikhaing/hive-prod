.row
  .columns.large-2
    = image_tag("carmicbeta.png",alt: "CarMask" )
    -#carmic
    -#%sub{style:'font-size:15px;line-height:0px;'}
    -#  DASH beta
  .columns.large-1
    &nbsp;
  .columns.large-9{style:'line-height:30px;color:rgb(7,165,179)'}
    -##address
    -if session[:carmic_user].present?
      %span
        Hello,
        -user = session[:carmic_user]
        =session[:carmic_user]
      |
      =link_to "logout" ,carmic_logout_path
    -else
      %span
        %a{"data-reveal" => "", "data-reveal-id" => "signin_model", :href => "#", id: "signup" }Log in
        = render :partial => "carmic/sign_in"
        |
        %a{"data-reveal" => "", "data-reveal-id" => "myModal", :href => "#", id: "signup" }Sign Up
        = render :partial => "carmic/sign_up"

    %span.right
      %a Support
  .columns.large-9#lefttopbar.right

    .columns.large-4
      %input#autocomplete{:onkeypress => "geolocate(event)",
      :placeholder => "Enter a location", :type => "text"}

    .columns.large-2
      %span#country

    .columns.large-1#remove_country
      %span
        >
      =image_tag("cancel.png", id: 'rm_country', style: 'display:none')

    .columns.large-2
      %span#state
      %input{type:'text', id:'edit_city', style: 'display:none'}
    .columns.large-1#remove_state
      %span
        >
      =image_tag("cancel.png", id: 'rm_state', style: 'display:none')

    .columns.large-2
      %span#address
      %input{type:'text', id:'edit_street', style: 'display:none'}
    .columns.large-1#remove_street
      =image_tag("cancel.png", id: 'rm_street')

    =image_tag("Search.png", :alt => "Myanmar", id: 'ok_find')

    .columns.large-2#select_country
      =select_tag("country_list", options_from_collection_for_select(Country.all, "name", "name", params[:country]), {:prompt => 'Select Country'})


.row
  .columns.large-6
    -##rotate
    #spiner_container
      #dynamic-container
        #marker
        #innerCircle
          .circle
            #map
    #rotate{style:'display:none'}
      rotate
    #back_time{style:'display:none'}
      time
  .columns.large-6{style:'padding-right:0px;'}

    %ul.tabs{"data-tab" => ""}
      %li.tab-title
        %a{href: "#panel1", id: "car_tab"}
          %span#user_count=@activeUsersArray.count rescue '0'

      %li.tab-title
        %a{href: "#panel2", id: "message_tab"}
          %span#topic_count=@topics_list.count rescue '0'

      %li.tab-title
        %a{href: "#panel3", id: "incident_tab"}
          %span#inc_count=@current_incidents.count rescue '0'
    .tabs-content
      #panel1.content
        %table.responstable{style:'margin-bottom:0px'}
          %thead
            %tr
              %th CarNo
              %th Activity
              %th Speed
              %th Direction
        #active_users
          %table.responstable{style:'margin-top:0px'}
            %tbody#tbl_activeusers
              - if @activeUsersArray.present?
                -@activeUsersArray = @activeUsersArray
              -else
                -@activeUsersArray = @users
              - if @activeUsersArray.present?
                - @activeUsersArray.each do |user|
                  %tr{"data-id"=>"#{user["id"]}"}
                    %td{width:"20%"}
                      %span
                        =user["data"]["plate_number"]
                    %td{width:"25%",style:'text-align:left'}
                      %span
                        =user["data"]["activity"]
                    %td{width:"25%"}
                      %span
                        -if user["data"]["speed"].to_i > 0
                          = user["data"]["speed"].to_i * 30
                        -else
                          =user["data"]["speed"].to_i
                    %td{width:"25%"}
                      %span
                        =user["data"]["direction"]

      #panel2.content.active
        .row#time_filter
          .columns.large-4#one
            %a{href:'#', onclick: "showTimeSpinner()"}
              =image_tag("timemachine.png", id: 'rm_street')
            time machine
          .columns.large-4
            topics from the past 24 hrs
          .columns.large-4#two.swap_focus
            %a#timelabel{onclick: "showcurrenttopic()"}now
            %span 5 most recent

        .clear

        #display_topic
          -if @incidents.present?
            -@incidents.each do |inc|
              -host = User.find(inc.host_id)
              -peer = User.find(inc.peer_id)
              -host_color = host.data["color"]
              -host_num = host.data["plate_number"]
              -peer_color = peer.data["color"]
              -peer_num = peer.data["plate_number"]
              %table.topic_tbl{:width => "100%"}
                %tr
                  %td{width:"35%"}
                    %span
                      .car_no{style:"background:#"+host_color+" !important"}
                        =host_num
                    %span{style:'color:red !important'}
                      +
                    %span
                    .car_no{style:"background:#"+peer_color+" !important"}
                      =peer_num


                  %td{:colspan => "2",width:"65%", class:'topic_row'}
                    %span.title{style:'color:red !important'}
                      POSSIBLE COLLISION
                    %span.right
                      #{time_ago_in_words(inc.created_at)} ago
            %hr
          -if @filter_by_time == true
            %input{type:'hidden', value:"#{@topic_by_time.count rescue '0'}", id:'hid_tcount'}
            -@topics_list = @topic_by_time
            -@topic_avatar_url = @topic_by_time_avatar_url
          -else
            %input{type:'hidden', value:"#{@topics_list.count rescue '0'}", id:'hid_tcount'}
            -@topics_list = @topics_list
            -@topic_avatar_url = @topic_avatar_url

          %input{type:'hidden', value:"#{@activeUsersArray.count rescue '0'}", id:'hid_ucount'}
          %ul{:id => "nav"}
            - if @topics_list.present?
              -#-@topics_list = @topics_list.first(5)
              - @topics_list.each do |sTopic|
                -string =   @topic_avatar_url[sTopic.id].to_s
                -substring = "carmic"
                -string.slice! substring
                -title = sTopic.title.split(':')
                -car_color = sTopic.user.data["color"]
                -inc_car = title.first.split("to ")
                -inc_car = inc_car.last
                -inc_user = User.where("data -> 'plate_number' = ?",inc_car).take


                -if (sTopic.offensive < 3)
                  %li
                    %a{href:"#", id:"topicid", topicID: "#{sTopic.id}" , name:"topic_lists"  ,onclick:"retrieve_posts(this);"}
                      %table.topic_tbl{:width => "100%"}
                        %tr
                          %td{width:"35%"}
                            %span
                              .car_no{style:"background:#"+car_color+" !important"}
                                =sTopic.user.data["plate_number"]
                            %span
                              >
                              -if title.count > 1
                                -inc_color = inc_user.data["color"]
                                .car_no{style:"background:#"+inc_color+" !important"}
                                  =inc_car
                              -else
                                .car_no
                                  all

                          %td{:colspan => "2",width:"65%", class:'topic_row'}
                            %span.title
                              = title.last
                            %span.right
                              #{time_ago_in_words(sTopic.created_at)} ago
          -#-if @topics_list.present?
          -#  .paginate{style:'float:right; margin-right:30px;font-size:16px;'}
          -#    =paginate @topics_list
        %br
        #posts_display
          - if @post_lists.present?
            = render :partial => "carmic/all_posts"

      #panel3.content

        #current_incident_wrapper
          -if @current_incidents.present?
            %input{type:'hidden', value:"#{@current_incidents.count rescue '0'}", id:'hid_current_inc'}
            -@current_incidents.each do |inc|
              -host = User.find(inc.host_id)
              -peer = User.find(inc.peer_id)
              -host_color = host.data["color"]
              -host_num = host.data["plate_number"]
              -peer_color = peer.data["color"]
              -peer_num = peer.data["plate_number"]
              %table.topic_tbl{:width => "100%"}
                %tr
                  %td{width:"35%"}
                    %span
                      .car_no{style:"background:#"+host_color+" !important"}
                        =host_num
                    %span{style:'color:red !important'}
                      +
                    %span
                    .car_no{style:"background:#"+peer_color+" !important"}
                      =peer_num


                  %td{:colspan => "2",width:"65%", class:'topic_row'}
                    %span.title{style:'color:red !important'}
                      POSSIBLE COLLISION
                    %span.right
                      #{time_ago_in_words(inc.created_at)} ago
          -else
            %span There is no current Incident.

:javascript
   Carmic.init();
   $( "#draggable" ).draggable();
   $( ".droppable" ).droppable({
       drop: function( event, ui ) {
           $(this).addClass( "ui-state-highlight").find("p").html("Dropped!");
           alert($( this ).data("id"))
       }
   });

   $("#map_content").show();
   var __markers,marker,markers;

   var old_markers;
   var zoomedIn = false;
   var handler = Gmaps.build('Google', { builders: { Marker: InfoBoxBuilder} });

     handler.buildMap({
        provider: {
          disableDefaultUI:true,
          zoom: 18,
          streetViewControl: false,
          panControl: false,
          mapTypeControl: true,
          mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DEFAULT,
            mapTypeIds: [
              google.maps.MapTypeId.ROADMAP,
              google.maps.MapTypeId.TERRAIN
            ]
          },
          zoomControl: false,
        },
        internal: {id: 'map'}
        }, function(){


       markers = handler.addMarkers(#{raw @hash.to_json});


       __markers = markers
       old_markers = #{raw @hash.to_json}



       _.each(markers, function(marker){
          google.maps.event.trigger(marker.getServiceObject(), 'click');
       });

       handler.bounds.extendWith(markers);

       handler.fitMapToBounds();



       // Fired when the map becomes idle after panning or zooming.
       google.maps.event.addListener(map, 'idle', function() {
           showVisibleMarkers();
       });

     });

     var zoomControlDiv = document.createElement('div');
     zoomControlDiv.id = 'custom_zoomcontrol';
     //var zoomControl = new CustomZoomControl(zoomControlDiv, map);

     handler.getMap().controls[google.maps.ControlPosition.RIGHT_CENTER].push(zoomControlDiv);

     function updateMarkers(map, new_markers, rm_marker,old_markers)
     {
         // Remove current markers

        map.removeMarkers(rm_marker);

         var newMarkers= new_markers;
         var oldMarkers= old_markers;
         // Add each marker to the map according to received data


       map.removeMarkers(rm_marker);
       // Remove current markers
       // Add each marker to the map according to received data

       __markers = _.map(newMarkers, function(markerJSON) {

           marker = map.addMarker(markerJSON);
           //map.getMap().setZoom(16); // Not sure this should be in this iterator!
           for (var i = 0; i < oldMarkers.length; i++) {

           if (oldMarkers[i]["marker_id"] == markerJSON["marker_id"]) {
               var oldLat = oldMarkers[i]["lat"];
               var oldLng = oldMarkers[i]["lng"];

              var oldPosition = new google.maps.LatLng(oldLat,oldLng);

              marker.animation = new MarkerMoveAnimation(marker,
                 {
                     name: name
                     ,from: oldPosition
                     ,to: marker.getServiceObject().getPosition()
                     ,duration: 1000
                     ,effect: 'linear'
                     ,onStep: function(e)
                     {
                         //e.marker.getServiceObject().leash.setPath([start, e.marker.getServiceObject().getPosition()]);
                     }
                     ,onComplete: function(e)
                     {
                         animating = false;
                     }
                 })
              }

           }
           //google.maps.event.trigger(marker.getServiceObject(), 'click');

           _.extend(marker, markerJSON);


           marker.infowindow = new google.maps.InfoWindow({
               content: marker.infowindow
           });


           return marker;
       });

       //map.bounds.extendWith(__markers);


     };

     $("#incident_tab").on("click", function(){
       $.ajax({
          data: {
            current_incident: true
          },
          success: function(html) {
            var htmlobject = $(html);
            var output = htmlobject.find("#current_incident_wrapper")[0];
            var current_inc = new XMLSerializer().serializeToString(output);
            $("#current_incident_wrapper").replaceWith(current_inc);
            inc_count = $("#hid_current_inc").val();
            $("#inc_count").text(inc_count)
          }
        });
     })

     function getCoords(){
         $.ajax({
             type: 'GET',
             url: "#{@url}",
             success: function(data){

                 updateMarkers(handler,data.marker,__markers,old_markers);

                 old_markers = data.marker

                 $(data.marker).each(function(i,e){
                     var marker = e;
                     var lat = e["lat"];
                     var lng = e["lng"];
                 })

             }
         });
     }
     var visibleMarker,count;
     function showVisibleMarkers() {
      visibleMarker = [];
      var bounds = handler.getMap().getBounds(),
      count = 0;

      for (var i = 0; i < __markers.length; i++) {
          var marker = __markers[i];

          if(bounds.contains(marker.getServiceObject().getPosition())===true) {

              var m_id = marker["marker_id"]

              if(typeof m_id === 'undefined'){
                 // your code here.
               }else{
                  visibleMarker.push(m_id);
               };

              count++;
          }
      }
      $("#user_count").text(count);
      if(visibleMarker.length > 0){
         $.ajax({

           data: {
             user_ids: visibleMarker
           },
           success: function(html) {
             var htmlobject = $(html);

             var output = htmlobject.find("#active_users")[0];
             var testing = new XMLSerializer().serializeToString(output);
             $("#active_users").replaceWith(testing);
             $("#tbl_activeusers").show();
             //$("#posts_display").hide();
           }
         });
        }

      else{
         //$("#tbl_activeusers").hide();
      }
      }


     google.maps.event.addListener(handler.getMap(), 'click', function( event ){
       var lat = event.latLng.lat();
       var long = event.latLng.lng();
       var latlng   = new google.maps.LatLng(lat, long);
       //getLatLongDetail(latlng);

        $.ajax({

          data: {
            cur_lat: lat,
            cur_long: long
          },
          success: function(html) {
            var htmlobject = $(html);

            //var output = htmlobject.find("#display_topic")[0];
            //var testing = new XMLSerializer().serializeToString(output);
            //$("#display_topic").replaceWith(testing);
            //
            //$("#topic_count").text($("#hid_tcount").val());
            // var rotate = 'rotate(' +0 + 'deg)';
            //  $("#marker").css({'-moz-transform': rotate, 'transform' : rotate, '-webkit-transform': rotate, '-ms-transform': rotate});
            //  $("#posts_display").hide();
          }
        });


     });

   google.maps.event.addListener(handler.getMap(), 'zoom_changed', function( event ){
     //var lat = event.latLng.lat();
     //var long = event.latLng.lng();

     var lat = handler.getMap().getCenter().lat();
     var long = handler.getMap().getCenter().lng();

      $.ajax({

       data: {
         cur_lat: lat,
         cur_long: long
       },
       success: function(html) {
         var htmlobject = $(html);

         var output = htmlobject.find("#display_topic")[0];
         var testing = new XMLSerializer().serializeToString(output);
         $("#display_topic").replaceWith(testing);

         $("#topic_count").text($("#hid_tcount").val());

         var rotate = 'rotate(' +0 + 'deg)';
         $("#marker").css({'-moz-transform': rotate, 'transform' : rotate, '-webkit-transform': rotate, '-ms-transform': rotate});
         //$("#posts_display").hide();

       }
     });



   });

   function showTimeSpinner(){

      var one = $("#one").offset().left
      $("#one").swap({
                  target: "two",
                  opacity: "1",
                  speed: 1000,
                  callback: function() { // Optional. Callback function once the swap is complete
                  if (one <= 993 ){
                          $("#one").addClass("swap_focus")
                          $("#two").removeClass("swap_focus")
                        }else{
                          $("#one").removeClass("swap_focus")
                          $("#two").addClass("swap_focus")
                        }
                  }
      });




        setTimeout(function () {
              $("#marker").show();
              $('#spiner_container').removeClass('rm_bg_spin').addClass('add_bg_spin');
              $('.circle').addClass("circle_shadow");
            }, 400);

        $("#rotate").html(0);
        //$("#posts_display").hide();
     }

   function showcurrenttopic(){
      var two = $("#two").offset().left

      $("#two").swap({
                  target: "one",
                  opacity: "1",
                  speed: 1000,
                  callback: function() { // Optional. Callback function once the swap is complete
                    if (two > 993 ){
                            $("#one").addClass("swap_focus")
                            $("#two").removeClass("swap_focus")
                          }else{
                            $("#one").removeClass("swap_focus")
                            $("#two").addClass("swap_focus")
                          }
                  }
      });


      setTimeout(function () {
        $("#marker").hide();
        $('#spiner_container').removeClass('add_bg_spin').addClass('rm_bg_spin');
        $('.circle').removeClass("circle_shadow");
      }, 400);
       $("#rotate").html(0);

      var lat = handler.getMap().getCenter().lat();
     var long = handler.getMap().getCenter().lng();

      $.ajax({

       data: {
         cur_lat: lat,
         cur_long: long
       },
       success: function(html) {
         var htmlobject = $(html);

         var output = htmlobject.find("#display_topic")[0];
         var testing = new XMLSerializer().serializeToString(output);
         $("#display_topic").replaceWith(testing);

         $("#topic_count").text($("#hid_tcount").val());
          var rotate = 'rotate(' +0 + 'deg)';
              $("#marker").css({'-moz-transform': rotate, 'transform' : rotate, '-webkit-transform': rotate, '-ms-transform': rotate});
          //$("#posts_display").hide();
       }
     });


   }



   function topic_filter_by_time(backTime){
      if(backTime !=  0){
        $.ajax({

           data: {
             time_filter: backTime
           },
           success: function(html) {
             var htmlobject = $(html);

             var output = htmlobject.find("#display_topic")[0];
             var testing = new XMLSerializer().serializeToString(output);
             $("#display_topic").replaceWith(testing);
             $("#topic_count").text($("#hid_tcount").val());
           }
         });
      }
   }

   window.topic_filter_by_time = topic_filter_by_time;




  $('#country_list').live('change', function() {
    var map = handler.getMap();
      var country = $('#country_list').val();
      var geocoder = new google.maps.Geocoder();

      geocoder.geocode( { 'address': country }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
              map.setCenter(results[0].geometry.location);
              re_lat =results[0].geometry.location.lat();
               re_lng =results[0].geometry.location.lng();

               var latlng   = new google.maps.LatLng(re_lat, re_lng);
               getLatLongDetail(latlng);

              map.setZoom(15);
          } else {
              alert("Could not find location: " + location);
          }
      });


  } );

   var placeSearch, autocomplete;
   var componentForm = {
     street_number: 'short_name',
     route: 'long_name',
     locality: 'long_name',
     administrative_area_level_1: 'short_name',
     country: 'long_name',
     postal_code: 'short_name'
   };


     autocomplete = new google.maps.places.Autocomplete(
         /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),
         { types: ['geocode'] });
     // When the user selects an address from the dropdown,
     // populate the address fields in the form.
     google.maps.event.addListener(autocomplete, 'place_changed', function() {
       fillInAddress();
     });


   // [START region_fillform]
   function fillInAddress() {
     // Get the place details from the autocomplete object.
     var place = autocomplete.getPlace();

   }

   function geolocate(e) {
   var code = e.keyCode || e.which;
   if (code ==13){
      var map = handler.getMap();
            var country = $('#autocomplete').val();
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode( { 'address': country }, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);

                    re_lat =results[0].geometry.location.lat();
                     re_lng =results[0].geometry.location.lng();

                     var latlng   = new google.maps.LatLng(re_lat, re_lng);
                     getLatLongDetail(latlng);

                    map.setZoom(16);
                } else {
                    alert("Could not find location: " + location);
                }
            });
   }

   }

  var map = handler.getMap();

  $("#ok_find").on("click",function(){
    var street = $("#edit_street").val();
    var city = $("#edit_city").val();
    var country = $('#country').text();
    var format_address;
    var auto_address = $('#autocomplete').val();

    if (city == ''){
       city = $("#state").text();
    }

    var geocoder = new google.maps.Geocoder();
    var re_lat, re_lng;

    if (auto_address == ''){

       if(street == ''){
         format_address = city + ', ' + country;

         geocoder.geocode( { 'address': format_address }, function(results, status) {
             if (status == google.maps.GeocoderStatus.OK) {
                 map.setCenter(results[0].geometry.location);

                 re_lat =results[0].geometry.location.lat();
                 re_lng =results[0].geometry.location.lng();

                 var latlng   = new google.maps.LatLng(re_lat, re_lng);
                 getLatLongDetail(latlng);

                 smoothZoom(map, 10, map.getZoom(), true);
                 zoomedIn = true;
             } else {
                 alert("Could not find location: " + location);
             }
         });

       }
       else if(country != '' && city != "" && street != "")
       {
         var city_country = city + ', ' + country;
         format_address = street + ', ' + city_country;

         geocoder.geocode( { 'address': format_address }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);

                re_lat =results[0].geometry.location.lat();
                re_lng =results[0].geometry.location.lng();

                //var latlng   = new google.maps.LatLng(re_lat, re_lng);
                //getLatLongDetail(latlng);

                smoothZoom(map, 16, map.getZoom(), true);
                zoomedIn = true;

            } else {
                alert("Could not find location: " + location);
            }
          });
       }
    }else{
       geocoder.geocode( { 'address': auto_address }, function(results, status) {
           if (status == google.maps.GeocoderStatus.OK) {
               map.setCenter(results[0].geometry.location);

               re_lat =results[0].geometry.location.lat();
               re_lng =results[0].geometry.location.lng();;

               smoothZoom(map, 16, map.getZoom(), true);
               zoomedIn = true;

           } else {
               alert("Could not find location: " + location);
           }
       });
    }

    $('#autocomplete').hide();
    $('#country').show();
    $('#state').show();
    $('#address').show();
    $("#edit_street").hide();
    $("#edit_city").hide();

    $("#rm_state").hide();

    $('#state').text(city);
    $('#address').text(street);
    $("#remove_state  > span").text(">");
    $("#remove_country  > span").text(">");
    $("#remove_country  > span").text(">");
    $("#remove_street").show();
  })
   // [END region_geolocation]


   $("#remove_street").click(function(){
       $("#remove_state  > span").text(" ");
       $('#address').hide();
       $("#edit_street").hide();
       $("#rm_state").show();
       $("#remove_street").hide();

       //setTimeout("map.setZoom(8)",1000);

       smoothZoom(map, 5, map.getZoom(), false);
       zoomedIn = false;

   })

   $("#rm_state").click(function(){
       $("#remove_country  > span").text(" ");
       $('#state').hide();
       $('#address').hide();
       $("#edit_street").hide();
       $("#edit_city").hide();
       $("#rm_state").hide();
       $("#rm_country").show();
       //setTimeout("map.setZoom(4)",1000);

       smoothZoom(map, 3, map.getZoom(), false);
       zoomedIn = false;
   })

   $("#rm_country").click(function(){
       $("#remove_country  > span").text(" ");
       $("#country").hide();
       $("#rm_country").hide();
       $("#autocomplete").val("");
       $("#autocomplete").show();
   })

   function smoothZoom (map, level, cnt, mode) {
   		//alert('Count: ' + cnt + 'and Max: ' + level);

   		// If mode is zoom in
   		if(mode == true) {

   			if (cnt >= level) {
   				return;
   			}
   			else {
   				var z = google.maps.event.addListener(map, 'zoom_changed', function(event){
   					google.maps.event.removeListener(z);
   					smoothZoom(map, level, cnt + 1, true);
   				});
   				setTimeout(function(){map.setZoom(cnt)}, 80);
   			}
   		} else {
   			if (cnt <= level) {
   				return;
   			}
   			else {
   				var z = google.maps.event.addListener(map, 'zoom_changed', function(event) {
   					google.maps.event.removeListener(z);
   					smoothZoom(map, level, cnt - 1, false);
   				});
   				setTimeout(function(){map.setZoom(cnt)}, 80);
   			}
   		}

   		window.smoothZoom = smoothZoom;
   }

  window.setInterval(getCoords, 4000);
